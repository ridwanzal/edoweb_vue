{"remainingRequest":"/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/rwz-scafol/VUE_CLI/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rwz-scafol/VUE_CLI/web/src/views/frontend/About.vue?vue&type=template&id=12792dca&","dependencies":[{"path":"/home/rwz-scafol/VUE_CLI/web/src/views/frontend/About.vue","mtime":1584507443313},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}