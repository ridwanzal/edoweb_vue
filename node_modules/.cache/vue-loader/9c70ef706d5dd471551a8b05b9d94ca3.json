{"remainingRequest":"/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/rwz-scafol/VUE_CLI/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rwz-scafol/VUE_CLI/web/src/components/Content.vue?vue&type=template&id=7eab81f9&","dependencies":[{"path":"/home/rwz-scafol/VUE_CLI/web/src/components/Content.vue","mtime":1584278205760},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rwz-scafol/VUE_CLI/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY29uZHNlY3Rpb24iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTcgY29sLW1kLTcgY29sLXhzLTEyIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidnVlLXR5cGVkLWpzIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzdHJpbmdzOiBbCiAgICAgICAgICAgICAgICAgICAgICAiSGkgdGhlcmUsIFdlbGNvbWUgdG8gRWRvLiIsCiAgICAgICAgICAgICAgICAgICAgICAiVGVjaG5vbG9neSBFbnRodXNpYXN0LiIsCiAgICAgICAgICAgICAgICAgICAgICAiU29sdXRpb24gZm9yIHdlYiBkZXZlbG9wbWVudC4iLAogICAgICAgICAgICAgICAgICAgICAgIkJ1aWxkaW5nIG1vYmlsZSBhcHBzLiIsCiAgICAgICAgICAgICAgICAgICAgICAiRGVsaXZlciBpbXByZXNzaXZlIGRlc2lnbi4iCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHR5cGVTcGVlZDogMTIwLAogICAgICAgICAgICAgICAgICAgIGN1cnNvckNoYXI6ICJfIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaDEiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0eXBpbmciLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiNDBweCIsIGhlaWdodDogIjU1cHgiIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFuaW1hdGVkIGZhZGVJbiIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjNmY3YjgwICFpbXBvcnRhbnQiLAogICAgICAgICAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjEwcHgiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY2FwdGlvbnRleHQiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiSGVsbG8gcGVvcGxlLCBteSBuYW1lIGlzIE0uIFJpZHdhbiBaYWxiaW5hLCBJIGFtIGEgU29mdHdhcmUgRW5naW5lZXIgYW5kIEdyYXBoaWMgRGVzaWduZXIgYmFzZWQgaW4gUGFsZW1iYW5nLCBwcmV2aW91c2x5IGluIEpha2FydGEsIHNwZWNpYWxpemluZyBpbiBkZXZlbG9waW5nIChhbmQgb2NjYXNpb25hbGx5IGRlc2lnbmluZykgc3R1bm5pbmcgYW5kIHF1YWxpdHkgd2Vic2l0ZSBhbmQgYXBwbGljYXRpb25zLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZXBhcmF0b3IiIH0pLAogICAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICBfdm0uX20oMSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbSgyKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm91cnRoc2VjdGlvbiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1sZy0xMiBjb2wtbWQtMTIgY29sLXhzLTEyIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAicGFkZGluZy10b3AiOiAiNjBweCIsICJwYWRkaW5nLWJvdHRvbSI6ICI5MHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiY2VudGVyIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogIjYwMCIsICJmb250LXNpemUiOiAiMjVweCIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJXaGF0IEkgZG8gaW4gZ2VuZXJhbCIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAibGluZS1oZWlnaHQiOiAiMzVweCIsCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjgwJSIsCiAgICAgICAgICAgICAgICAgICAgICAibWFyZ2luLXRvcCI6ICI0MHB4IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJJIHByb3ZpZGUgYSBsb3Qgb2Ygc2VydmljZSBpbmNsdWRpbmcsIFdlYiBEZXZlbG9wbWVudCwgR3JhcGhpYyBEZXNpZ24gc2VydmljZXMsIFVJLyBVWCBEZXNpZ24gYW5kIEFuZHJvaWQgTW9iaWxlIEFwcCBEZXZlbG9wbWVudC4gQ3JlYXRlIHN0dW5uaW5nLCBjbGVhbiBhbmQgYWNjZXB0YWJsZSBwcm9kdWN0LiBJJ20gdmVyeSBoYXBweSBpZiB5b3Ugd2FudCB0byBjb2xsYWJvcmF0ZSB0byBtYWtlIGFuIGF3ZXNvbWUgcHJvZHVjdC4gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctMyBjb2wtbWQtMyBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkIGFuaW1hdGVkIGZhZGVJblVwIGNhcmRfc2VydmljZXMiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNi44cmVtIiwgaGVpZ2h0OiAiNTMwcHgiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJjZW50ZXIiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjY1JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvMS5wbmciKSB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiMTVweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctYm90dG9tIjogIjE1cHgiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJXZWIgRGV2ZWxvcG1lbnQuIildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIk1hbnkgeWVhcnMgaW4gU29mdHdhcmUgRGV2ZWxvcG1lbnQuIEhhdmUgYW4gZXhwZXJpZW5jZXMgb24gbGVhZCBwcm9kdWN0IGVuZ2luZWVyaW5nLCB0ZWFtIG1hbmFnZW1lbnQsIGFuZCBzdGFydHVwIGVudmlyb25tZW50LiBXb3JrIHdpdGggbWUgYW5kIGNyZWF0ZSBzdHVubmluZyBwcm9kdWN0IgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctMyBjb2wtbWQtMyBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkIGFuaW1hdGVkIGZhZGVJblVwIGNhcmRfc2VydmljZXMiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNi44cmVtIiwgaGVpZ2h0OiAiNTMwcHgiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJjZW50ZXIiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjY1JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvMi5wbmciKSB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiMTVweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctYm90dG9tIjogIjE1cHgiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJNb2JpbGUgQXBwbGljYXRpb24iKV0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiTWFueSB5ZWFycyBpbiBTb2Z0d2FyZSBEZXZlbG9wbWVudC4gSGF2ZSBhbiBleHBlcmllbmNlcyBvbiBsZWFkIHByb2R1Y3QgZW5naW5lZXJpbmcsIHRlYW0gbWFuYWdlbWVudCwgYW5kIHN0YXJ0dXAgZW52aXJvbm1lbnQuIFdvcmsgd2l0aCBtZSBhbmQgY3JlYXRlIHN0dW5uaW5nIHByb2R1Y3QuIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctMyBjb2wtbWQtMyBjb2wteHMtMTIiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkIGFuaW1hdGVkIGZhZGVJblVwIGNhcmRfc2VydmljZXMiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNi44cmVtIiwgaGVpZ2h0OiAiNTMwcHgiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJjZW50ZXIiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjY1JSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvMy5wbmciKSB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImg1IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiMTVweCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctYm90dG9tIjogIjE1cHgiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJHcmFwaGljIERlc2lnbiIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJFeHBlcmllbmNlZCBpbiBHcmFwaGljIERlc2lnbiwgVVggUmVzZWFyY2ggYW5kIFZpc3VhbCBEZXNpZ24sIGZvbGxvdyBjdXJyZW50IGRlc2lnbiB0cmVuZCwgYW5kIG1haW50YWluaW5nIGNsZWFuLCBhY2NlcHRhYmxlIGRlc2lnbiBwcm9kdWN0LCBwcmVjaXNlIGFuZCBjdXN0b21lciBvcmllbnRlZC4iCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy0zIGNvbC1tZC0zIGNvbC14cy0xMiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQgYW5pbWF0ZWQgZmFkZUluVXAgY2FyZF9zZXJ2aWNlcyIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjE2LjhyZW0iLCBoZWlnaHQ6ICI1MzBweCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImNlbnRlciIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNjUlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy80LnBuZyIpIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiaDUiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLXRvcCI6ICIxNXB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy1ib3R0b20iOiAiMTVweCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlVJL1VYIERlc2lnbiIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJFeHBlcmllbmNlZCBpbiBHcmFwaGljIERlc2lnbiwgVVggUmVzZWFyY2ggYW5kIFZpc3VhbCBEZXNpZ24sIGZvbGxvdyBjdXJyZW50IGRlc2lnbiB0cmVuZCwgYW5kIG1haW50YWluaW5nIGNsZWFuLCBhY2NlcHRhYmxlIGRlc2lnbiBwcm9kdWN0LCBwcmVjaXNlIGFuZCBjdXN0b21lciBvcmllbnRlZC4iCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZnRoc2VjdGlvbiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF92bS5pbWFnZXMubGVuZ3RoID49IDkKICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInJvdyBpbWFnZXMiIH0sCiAgICAgICAgICAgICAgX3ZtLl9sKF92bS5pbWFnZXMsIGZ1bmN0aW9uKGltYWdlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogW3sgbmFtZTogInZpZXdlciIsIHJhd05hbWU6ICJ2LXZpZXdlciIgfV0sCiAgICAgICAgICAgICAgICAgICAga2V5OiBpbWFnZSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1sZy00IGNvbC1tZC00IGNvbC1zbS00IGNvbC14cy00IgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIGtleTogaW1hZ2UuaW1hZ2VzLnN0YW5kYXJkX3Jlc29sdXRpb24uaWQsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltYWdlX2luc3RhZ3JhbSBhbmltYXRlZCBmYWRlSW5VcCIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAiYm9yZGVyLXJhZGl1cyI6ICI0cHgiLAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIzMHB4IgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogaW1hZ2UuaW1hZ2VzLnN0YW5kYXJkX3Jlc29sdXRpb24udXJsIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgMAogICAgICAgICAgICApCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF92bS5fbSgzKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvdXJ0aHNlY3Rpb250aHJlZSIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1sZy0xMiBjb2wtbWQtMTIgY29sLXhzLTEyIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAicGFkZGluZy10b3AiOiAiNjBweCIsICJwYWRkaW5nLWJvdHRvbSI6ICI1MHB4IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiY2VudGVyIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtd2VpZ2h0IjogIjYwMCIsICJmb250LXNpemUiOiAiMjVweCIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJXaGF0IENsaWVudCBzYWlkIGFib3V0IG1lLiIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAiY29sLWxnLTEwIGNvbC1tZC0xMCBjb2wteHMtMTIgb2Zmc2V0LW1kLTEgb2Zmc2V0LWxnLTEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJjYXJvdXNlbCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAicGVyLXBhZ2UiOiAxLAogICAgICAgICAgICAgICAgICAgICJuYXZpZ2F0ZS10byI6IF92bS5zb21lTG9jYWxQcm9wZXJ0eSwKICAgICAgICAgICAgICAgICAgICAibW91c2UtZHJhZyI6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJzbGlkZSIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImNlbnRlciIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dF90ZXN0aSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgIlNheWEgc3VkYWggYmViZXJhcGEga2FsaSBkaWJ1YXRrYW4gZGVzYWluIGxvZ28gZGFuIGhhc2lsbnlhIEFsaGFtZHVsaWxsYWggbWVtdWFza2FuLCBkZXNhaW5ueWEgZGluYW1pcyBkYW4gc2VzdWFpLi4uIEJhcmFrYWxsYWh1IEZpaWt1bS4iICcKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjYTlhOWE5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk0uIElxYmFsIC0gT3duZXIgQ2luZG8iKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNsaWRlIiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiY2VudGVyIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0X3Rlc3RpIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAiUmVjb21lbmRlZCBkZXNpZ25lci4gRGVzYWluIHlhbmcgZGlidWF0bnlhIHNlbGFsdSBtZW11YXNrYW4uIiAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAiI2E5YTlhOSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJGYXJpcyBIdW1hbSAtIE93bmVyIENpbmRvLCBBbm5hamFhaCIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAic2xpZGUiLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJjZW50ZXIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHRfdGVzdGkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICJTYXlhIHN1ZGFoIDIgKGR1YSkga2FsaSBtZW1idWF0IGxvZ28gZGVuZ2FuIGVkbywgZGFuIHNlbXVhIGthcnlhIG55YSBiYWd1cyBkYW4gc2FuZ2F0IG1lbXVhc2thbi4iICcKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjYTlhOWE5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiS2FoYmkgSGFyZGlhbnN5YWggLSBTaW5hcm9qYSBLb250cmFrdG9yICYgU3VwcGxpZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNsaWRlIiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiY2VudGVyIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0X3Rlc3RpIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAiU2F5YSBPd25lciBOdWtpbW90byBQaG90b2dyYXB5IHNhbmdhdCBwdWFzIGF0YXMgbGF5YW5hbiBqYXNhIHBlbWJ1YXRhbiBsb2dvIHlhbmcgc2FuZ2F0IGJhaWssIHRlcnV0YW1hIGRlbmdhbiBwZWxheWFuYW4geWFuZyByYW1haCBkYW4ganVnYSBkaXNhaW4geWFuZyBiYWd1cyBkYW4gc3VwcG9ydCBkYWxhbSBiZXJiYWdhaSBiZW50dWsgZm9ybWF0IGZpbGUgc2VoaW5nZ2EgYmlzYSBsYW5nc3VuZyBkaSBndW5ha2FuIC4gU2Vtb2dhIGtlZGVwYW5ueWEgZGFwYXQgbWVtcGVydGFoYW5rYW4gZGFuIG1lbmluZ2thdGthbiBrd2FsaXRhcyBsYXlhbmFubnlhIC4iICcKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjYTlhOWE5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk51a2kgTUsgLSBPd25lciBOdWtpbW90byBQaG90b2dyYXB5IikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJzbGlkZSIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImNlbnRlciIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dF90ZXN0aSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgIkthbWkgcGVybmFoIGRpYnVhdGthbiBsb2dvIGRhbiBoYXNpbG55YSBrZXJlbiBva2UgcHVueWEuIiAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAiI2E5YTlhOSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJEaWFuIFB1cm5hbWEgLSBHdXJ1IEtlc2VuaWFuIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJzbGlkZSIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImNlbnRlciIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dF90ZXN0aSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgQWRhIGJhbnlhayBhc3NldHMgeWFuZyBzYXlhIHBlcmNheWFrYW4ga2VwYWRhIFJpZHdhbiBhLmsuYSBFZG8uIEJlc3V0YW4gaGFzaWwga2FyeWFueWEgc2VzdWFpIGRlbmdhbiBrZWluZ2luYW4uIFNlbXVhIGFzc2V0cyBkZXNpZ24gdW50dWsga29uZnJlbnNpIGludGVybmFzaW9uYWwgOiBFRUNTSSAyMDE1IHNkIDIwMTcsIElDRUNPUyAyMDE3LTIwMTksQVJTIDIwMTYtMjAxNy4gUmVwb3NpdG9yeSBuYXNpb25hbCBSSVNURUtESUtUSSA6IFNJTlRBLCBHQVJVREEgZGFuIEFOSkFOSS4gTmlsYWkgdGFtYmFoIGxhaW5ueWEgZGFyaSBzdWR1dCBwYW5kYW5nIGFrYWRlbWlzaSBhZGFsYWggc2VtdWEgdG9vbHMgeWFuZyBkaWd1bmFrYW4gbWVuZ2d1bmFsYW4gcGxhdGZvcm0gb3BlbiBzb3VyY2UuIFNhbGFtLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAiI2E5YTlhOSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkRlcmlzIFN0aWF3YW4uIFBoLkQgLSBBc3NvY2lhdGUgUHJvZmVzc29yIFVuaXZlcnNpdGFzIFNyaXdpamF5YSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImJ1dHRvbiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbjFfb3V0bGluZV9zbWFsbCIsCiAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIsIGlkOiAibGVhcm5tb3JlcyIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImZlYXRoZXItMjQiLAogICAgICAgICAgYXR0cnM6IHsgImRhdGEtZmVhdGhlciI6ICJhcnJvdy1yaWdodCIgfQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiTGVhcm4gbW9yZSIpCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJhIiwKICAgICAgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly9lZG8uc2NhZm9sLmlkL2Zyb250cGFnZS9jb250YWN0IiB9IH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbjFfc21hbGwiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIiM0ZDRkNGQiLCAibWFyZ2luLWxlZnQiOiAiOHB4IiB9LAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiwgaWQ6ICJiY29udGFjdHMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmVhdGhlci0yNCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtZmVhdGhlciI6ICJicmllZmNhc2UiIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIENvbnRhY3QgbWUiKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy01IGNvbC1tZC01IGNvbC14cy0xMiIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiYW5pbWF0ZWQgZmFkZUluVXAgZmFzdCIsCiAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9LAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2Vkb3dvcmsucG5nIikgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctMTIgY29sLW1kLTEyIGNvbC14cy0xMiAiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vaW5zdGFncmFtLmNvbS9yaWR3YW56YWwiLCB0YXJnZXQ6ICJfYmxhbmsiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnV0dG9uMV9vdXRsaW5lX3NtYWxsZXJfYmxhY2siLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHt9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIsIGlkOiAibGVhcm5tb3JlcyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmVhdGhlci0yNCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLWZlYXRoZXIiOiAiYXJyb3ctcmlnaHQiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCJTaG93IG1vcmUiKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}